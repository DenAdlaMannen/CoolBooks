// <auto-generated />
using System;
using Coolbooks.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Coolbooks.Data.Migrations
{
    [DbContext(typeof(CoolBookContext))]
    [Migration("20230411115246_Migration2")]
    partial class Migration2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Coolbooks.Models.Author", b =>
                {
                    b.Property<int>("AuthorId")
                        .HasColumnType("int")
                        .HasColumnName("AuthorID");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("Efternamn")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Firstname")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("AuthorId")
                        .HasName("PK__Authors__70DAFC146B7E6384");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("Coolbooks.Models.Book", b =>
                {
                    b.Property<int>("BookId")
                        .HasColumnType("int")
                        .HasColumnName("BookID");

                    b.Property<int?>("AuthorId")
                        .HasColumnType("int")
                        .HasColumnName("AuthorID");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("GenreId")
                        .HasColumnType("int")
                        .HasColumnName("GenreID");

                    b.Property<string>("Imagepath")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Isbn")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("ISBN");

                    b.Property<string>("Title")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("BookId")
                        .HasName("PK__Books__3DE0C2274E735BF0");

                    b.HasIndex("AuthorId");

                    b.HasIndex("GenreId");

                    b.HasIndex("UserId");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("Coolbooks.Models.Genre", b =>
                {
                    b.Property<int>("GenreId")
                        .HasColumnType("int")
                        .HasColumnName("GenreID");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Name")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("GenreId")
                        .HasName("PK__Genres__0385055E97CE0777");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("Coolbooks.Models.Review", b =>
                {
                    b.Property<int>("ReviewId")
                        .HasColumnType("int")
                        .HasColumnName("ReviewID");

                    b.Property<int?>("BookId")
                        .HasColumnType("int")
                        .HasColumnName("BookID");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("Rating")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Text")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Title")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("ReviewId")
                        .HasName("PK__Reviews__74BC79AE3238230A");

                    b.HasIndex("BookId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("Coolbooks.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PasswordHash")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("SecurityStamp")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("UserinfoId")
                        .HasColumnType("int")
                        .HasColumnName("UserinfoID");

                    b.HasKey("UserId")
                        .HasName("PK__Users__1788CCACA057E8B4");

                    b.HasIndex("UserinfoId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Coolbooks.Models.Userinfo", b =>
                {
                    b.Property<int>("UserInfoId")
                        .HasColumnType("int")
                        .HasColumnName("UserInfoID");

                    b.Property<string>("Address")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("Firstname")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Lastname")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Phone")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Role")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("UserInfoId")
                        .HasName("PK__Userinfo__D07EF2C4D00683BD");

                    b.ToTable("Userinfo");
                });

            modelBuilder.Entity("Coolbooks.Models.Book", b =>
                {
                    b.HasOne("Coolbooks.Models.Author", "Author")
                        .WithMany("Books")
                        .HasForeignKey("AuthorId")
                        .HasConstraintName("FK__Books__AuthorID__44FF419A");

                    b.HasOne("Coolbooks.Models.Genre", "Genre")
                        .WithMany("Books")
                        .HasForeignKey("GenreId")
                        .HasConstraintName("FK__Books__GenreID__45F365D3");

                    b.HasOne("Coolbooks.Models.User", "User")
                        .WithMany("Books")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__Books__UserID__440B1D61");

                    b.Navigation("Author");

                    b.Navigation("Genre");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Coolbooks.Models.Review", b =>
                {
                    b.HasOne("Coolbooks.Models.Book", "Book")
                        .WithMany("Reviews")
                        .HasForeignKey("BookId")
                        .HasConstraintName("FK__Reviews__BookID__4222D4EF");

                    b.HasOne("Coolbooks.Models.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__Reviews__UserID__4316F928");

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Coolbooks.Models.User", b =>
                {
                    b.HasOne("Coolbooks.Models.Userinfo", "Userinfo")
                        .WithMany("Users")
                        .HasForeignKey("UserinfoId")
                        .HasConstraintName("FK__Users__UserinfoI__412EB0B6");

                    b.Navigation("Userinfo");
                });

            modelBuilder.Entity("Coolbooks.Models.Author", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("Coolbooks.Models.Book", b =>
                {
                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("Coolbooks.Models.Genre", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("Coolbooks.Models.User", b =>
                {
                    b.Navigation("Books");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("Coolbooks.Models.Userinfo", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
